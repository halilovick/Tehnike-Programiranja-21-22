// TP 2021/2022: ZadaÄ‡a 2, Zadatak 1
#include <cmath>
#include <iostream>
#include <limits>
#include <vector>

bool aktiviran = true;
enum class Smjer { Nalijevo, Nadesno };
enum class Pravci {
  Sjever,
  Sjeveroistok,
  Istok,
  Jugoistok,
  Jug,
  Jugozapad,
  Zapad,
  Sjeverozapad
};
enum class KodoviGresaka {
  PogresnaKomanda,
  NedostajeParametar,
  SuvisanParametar,
  NeispravanParametar
};
enum class Komande { Aktiviraj, Deaktiviraj, Nalijevo, Nadesno, Idi, Kraj };

bool UnosKomande(Komande &komanda, int &parametar, KodoviGresaka &kod_greske);
void AktivirajRobota();
void DeaktivirajRobota();
void Rotiraj(Pravci &orijentacija, Smjer na_koju_stranu);
void Idi(int &x, int &y, Pravci orijentacija, int korak);
void IspisiPoziciju(int x, int y, Pravci orijentacija);
void PrijaviGresku(KodoviGresaka kod_greske);
void IzvrsiKomandu(Komande komanda, int parametar, int &x, int &y,
                   Pravci &orijentacija);

void AktivirajRobota() { aktiviran = true; }

void DeaktivirajRobota() { aktiviran = false; }

void IspisiPoziciju(int x, int y, Pravci orijentacija) {
  if (aktiviran) {
    std::cout << "Robot je aktivan, nalazi se na poziciji (" << x << "," << y
              << ") i gleda na ";
  } else {
    std::cout << "Robot je neaktivan, nalazi se na poziciji (" << x << "," << y
              << ") i gleda na ";
  }
  if (orijentacija == Pravci::Sjever) {
    std::cout << "sjever.";
  } else if (orijentacija == Pravci::Sjeveroistok) {
    std::cout << "sjeveroistok.";
  } else if (orijentacija == Pravci::Sjeverozapad) {
    std::cout << "sjeverozapad.";
  } else if (orijentacija == Pravci::Jug) {
    std::cout << "jug.";
  } else if (orijentacija == Pravci::Jugoistok) {
    std::cout << "jugoistok.";
  } else if (orijentacija == Pravci::Jugozapad) {
    std::cout << "jugozapad.";
  } else if (orijentacija == Pravci::Zapad) {
    std::cout << "zapad.";
  } else if (orijentacija == Pravci::Istok) {
    std::cout << "istok.";
  }
  std::cout << std::endl;
}

void PrijaviGresku(KodoviGresaka kod_greske) {
  if (kod_greske == KodoviGresaka::PogresnaKomanda) {
    std::cout << "Nerazumljiva komanda!";
  } else if (kod_greske == KodoviGresaka::NedostajeParametar) {
    std::cout << "Komanda trazi parametar koji nije naveden!";
  } else if (kod_greske == KodoviGresaka::NeispravanParametar) {
    std::cout << "Parametar komande nije ispravan!";
  } else if (kod_greske == KodoviGresaka::SuvisanParametar) {
    std::cout << "Zadan je suvisan parametar nakon komande!";
  }
  std::cout << std::endl;
}

void Rotiraj(Pravci &orijentacija, Smjer na_koju_stranu) {
  if (aktiviran == false)
    return;
  if (orijentacija == Pravci::Sjever) {
    if (na_koju_stranu == Smjer::Nadesno)
      orijentacija = Pravci::Sjeveroistok;
    else if (na_koju_stranu == Smjer::Nalijevo)
      orijentacija = Pravci::Sjeverozapad;
  } else if (orijentacija == Pravci::Sjeveroistok) {
    if (na_koju_stranu == Smjer::Nadesno)
      orijentacija = Pravci::Istok;
    else if (na_koju_stranu == Smjer::Nalijevo)
      orijentacija = Pravci::Sjever;
  } else if (orijentacija == Pravci::Istok) {
    if (na_koju_stranu == Smjer::Nadesno)
      orijentacija = Pravci::Jugoistok;
    else if (na_koju_stranu == Smjer::Nalijevo)
      orijentacija = Pravci::Sjeveroistok;
  } else if (orijentacija == Pravci::Jugoistok) {
    if (na_koju_stranu == Smjer::Nadesno)
      orijentacija = Pravci::Jug;
    else if (na_koju_stranu == Smjer::Nalijevo)
      orijentacija = Pravci::Istok;
  } else if (orijentacija == Pravci::Jug) {
    if (na_koju_stranu == Smjer::Nadesno)
      orijentacija = Pravci::Jugozapad;
    else if (na_koju_stranu == Smjer::Nalijevo)
      orijentacija = Pravci::Jugoistok;
  } else if (orijentacija == Pravci::Jugozapad) {
    if (na_koju_stranu == Smjer::Nadesno)
      orijentacija = Pravci::Zapad;
    else if (na_koju_stranu == Smjer::Nalijevo)
      orijentacija = Pravci::Jug;
  } else if (orijentacija == Pravci::Zapad) {
    if (na_koju_stranu == Smjer::Nadesno)
      orijentacija = Pravci::Sjeverozapad;
    else if (na_koju_stranu == Smjer::Nalijevo)
      orijentacija = Pravci::Jugozapad;
  } else if (orijentacija == Pravci::Sjeverozapad) {
    if (na_koju_stranu == Smjer::Nadesno)
      orijentacija = Pravci::Sjever;
    else if (na_koju_stranu == Smjer::Nalijevo)
      orijentacija = Pravci::Zapad;
  }
}

void Idi(int &x, int &y, Pravci orijentacija, int korak) {
  int max = std::numeric_limits<int>::max(),
      min = std::numeric_limits<int>::min();
  long long int a{};
  if (aktiviran == false)
    return;
  if (korak < 0) {
    korak = abs(korak);
    if (orijentacija == Pravci::Istok)
      orijentacija = Pravci::Zapad;
    else if (orijentacija == Pravci::Jug)
      orijentacija = Pravci::Sjever;
    else if (orijentacija == Pravci::Zapad)
      orijentacija = Pravci::Istok;
    else if (orijentacija == Pravci::Sjever)
      orijentacija = Pravci::Jug;
    else if (orijentacija == Pravci::Sjeveroistok)
      orijentacija = Pravci::Jugozapad;
    else if (orijentacija == Pravci::Sjeverozapad)
      orijentacija = Pravci::Jugoistok;
    else if (orijentacija == Pravci::Jugoistok)
      orijentacija = Pravci::Sjeverozapad;
    else if (orijentacija == Pravci::Jugozapad)
      orijentacija = Pravci::Sjeveroistok;
  }
  if (orijentacija == Pravci::Istok) {
    a = korak;
    if (a + x > max) {
      x = max;
    } else {
      x = a + x;
    }
  } else if (orijentacija == Pravci::Jug) {
    a = korak;
    if (y - a < min) {
      y = min;
    } else {
      y = y - a;
    }
  } else if (orijentacija == Pravci::Zapad) {
    a = korak;
    if (x - a < min) {
      x = min;
    } else {
      x = x - a;
    }
  } else if (orijentacija == Pravci::Sjever) {
    a = korak;
    if (a + y > max) {
      y = max;
    } else {
      y = a + y;
    }
  } else if (orijentacija == Pravci::Jugozapad) {
    a = korak;
    if (y - a < min) {
      y = min;
    } else {
      y = y - a;
    }
    a = korak;
    if (x - a < min) {
      x = min;
    } else {
      x = x - a;
    }
  } else if (orijentacija == Pravci::Jugoistok) {
    a = korak;
    if (y - a < min) {
      y = min;
    } else {
      y = y - a;
    }
    a = korak;
    if (a + x > max) {
      x = max;
    } else {
      x = a + x;
    }
  } else if (orijentacija == Pravci::Sjeveroistok) {
    a = korak;
    if (a + y > max) {
      y = max;
    } else {
      y = a + y;
    }
    a = korak;
    if (a + x > max) {
      x = max;
    } else {
      x = a + x;
    }
  } else if (orijentacija == Pravci::Sjeverozapad) {
    a = korak;
    if (a + y > max) {
      y = max;
    } else {
      y = a + y;
    }
    a = korak;
    if (x - a < min) {
      x = min;
    } else {
      x = x - a;
    }
  }
  a = 0;
}

void IzvrsiKomandu(Komande komanda, int parametar, int &x, int &y,
                   Pravci &orijentacija) {
  if (komanda == Komande::Aktiviraj) {
    AktivirajRobota();
  } else if (komanda == Komande::Deaktiviraj) {
    DeaktivirajRobota();
  } else if (komanda == Komande::Nalijevo) {
    Rotiraj(orijentacija, Smjer::Nalijevo);
  } else if (komanda == Komande::Nadesno) {
    Rotiraj(orijentacija, Smjer::Nadesno);
  } else if (komanda == Komande::Idi) {
    Idi(x, y, orijentacija, parametar);
  }
}

bool UnosKomande(Komande &komanda, int &parametar, KodoviGresaka &kod_greske) {
  char znak = std::cin.get();
  while (znak == ' ') {
    znak = std::cin.get();
  }
  while (znak != '\n') {
    if (znak == 'D') {
      znak = std::cin.get();
      if (znak == '\n') {
        komanda = Komande::Nadesno;
        return true;
      } else if (znak == ' ') {
        komanda = Komande::Nadesno;
        std::cin.clear();
        std::cin.ignore(10000, '\n');
        return true;
      }
    } else if (znak == 'L') {
      znak = std::cin.get();
      if (znak == '\n') {
        komanda = Komande::Nalijevo;
        return true;
      } else if (znak == ' ') {
        komanda = Komande::Nalijevo;
        std::cin.clear();
        std::cin.ignore(10000, '\n');
        return true;
      } else {
        kod_greske = KodoviGresaka::SuvisanParametar;
        std::cin.clear();
        std::cin.ignore(10000, '\n');
        return false;
      }
    } else if (znak == 'A') {
      znak = std::cin.get();
      if (znak == '+') {
        znak = std::cin.get();
        if (znak == '\n' || znak == ' ') {
          komanda = Komande::Aktiviraj;
          return true;
        } else {
          kod_greske = KodoviGresaka::SuvisanParametar;
          std::cin.clear();
          std::cin.ignore(10000, '\n');
          return false;
        }
      } else if (znak == '-') {
        znak = std::cin.get();
        if (znak == '\n' || znak == ' ') {
          komanda = Komande::Deaktiviraj;
          return true;
        }
      }
    } else if (znak == 'I') {
      char unos = std::cin.get();
      while (unos == ' ') {
        unos = std::cin.get();
      }
      int broj = 0;
      bool negativan = false;
      if (unos == '\n') {
        kod_greske = KodoviGresaka::NedostajeParametar;
        return false;
      } else if (unos == 45) {
        negativan = true;
      } else if (unos < 48 || unos > 58) {
        kod_greske = KodoviGresaka::NeispravanParametar;
        std::cin.clear();
        std::cin.ignore(10000, '\n');
        return false;
      }
      while (unos != '\n') {
        while (unos == ' ') {
          unos = std::cin.get();
        }
        if (unos > 47 && unos < 58) {
          unos = unos - 48;
          broj = broj * 10 + unos;
        } else if (unos == 45) {
          negativan = true;
        } else if (unos == '\n') {
          break;
        } else {
          kod_greske = KodoviGresaka::NeispravanParametar;
          std::cin.clear();
          std::cin.ignore(10000, '\n');
          return false;
        }
        unos = std::cin.get();
      }
      if (negativan == true) {
        broj *= -1;
      }
      parametar = broj;
      komanda = Komande::Idi;
      return true;
    } else if (znak == 'K') {
      znak = std::cin.get();
      if (znak == '\n' || znak == ' ') {
        komanda = Komande::Kraj;
        return true;
      } else {
        kod_greske = KodoviGresaka::SuvisanParametar;
        std::cin.clear();
        std::cin.ignore(10000, '\n');
        return false;
      }
    } else {
      kod_greske = KodoviGresaka::PogresnaKomanda;
      std::cin.clear();
      std::cin.ignore(10000, '\n');
      return false;
    }
    znak = std::cin.get();
  }
  return true;
}

int main() {
  int x = 0, y = 0;
  Pravci orijentacija = Pravci::Sjever;
  Komande komanda;
  KodoviGresaka kod_greske;
  int parametar = 0;
  bool unos = true;
  IspisiPoziciju(x, y, orijentacija);
  for (;;) {
    unos = true;
    std::cout << "Unesi komandu:" << std::endl;
    unos = UnosKomande(komanda, parametar, kod_greske);
    if (unos == false) {
      PrijaviGresku(kod_greske);
    } else if (komanda == Komande::Kraj) {
      std::cout << "Dovidjenja!";
      return 0;
    } else {
      IzvrsiKomandu(komanda, parametar, x, y, orijentacija);
      IspisiPoziciju(x, y, orijentacija);
    }
  }
  return 0;
}

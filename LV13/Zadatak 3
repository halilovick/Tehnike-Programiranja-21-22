/*
    TP 16/17 (LV 13, Zadatak 3)
        Autotestove pisala Ivona Ivkovic. Sva pitanja, sugestije, prijave
   gresaka slati na mail iivkovic2@etf.unsa.ba

        Vrsit ce se provjera na prepisivanje tutorijala (na kraju semestra)
*/
#include <algorithm>
#include <iostream>
#include <vector>

class ApstraktniStudent {
protected:
  std::string ime, prezime;
  int indeks, broj_polozenih;
  double prosjecna_ocjena;

public:
  ApstraktniStudent(std::string ime, std::string prezime, int indeks)
      : ime(ime), prezime(prezime), indeks(indeks) {
    broj_polozenih = 0;
    prosjecna_ocjena = 5;
  }
  virtual ~ApstraktniStudent(){};
  virtual std::string DajIme() const { return ime; }
  virtual std::string DajPrezime() const { return prezime; }
  virtual int DajBrojIndeksa() const { return indeks; }
  virtual int DajBrojPolozenih() const { return broj_polozenih; }
  virtual double DajProsjek() const { return prosjecna_ocjena; }
  virtual void RegistrirajIspit(int ocjena) {
    if (ocjena < 5 || ocjena > 10)
      throw std::domain_error("Neispravna ocjena");
    else if (ocjena > 5) {
      double suma = prosjecna_ocjena * broj_polozenih;
      broj_polozenih++;
      prosjecna_ocjena = (ocjena + suma) / broj_polozenih;
    } else if (ocjena == 5) {
      broj_polozenih = broj_polozenih + 0;
      prosjecna_ocjena = prosjecna_ocjena + 0;
    }
  }
  virtual void PonistiOcjene() {
    broj_polozenih = 0;
    prosjecna_ocjena = 5;
  }
  virtual void IspisiPodatke() const = 0;
  virtual ApstraktniStudent *DajKopiju() const = 0;
};

class StudentBachelor : public ApstraktniStudent {
public:
  StudentBachelor(std::string ime, std::string prezime, int indeks)
      : ApstraktniStudent(ime, prezime, indeks){};
  ApstraktniStudent *DajKopiju() const override {
    return new StudentBachelor(*this);
  }
  void IspisiPodatke() const override {
    std::cout << "Student bachelor studija " << DajIme() << " " << DajPrezime()
              << ", sa brojem indeksa " << DajBrojIndeksa() << ",\n"
              << "ima prosjek " << DajProsjek() << "." << std::endl;
  }
};

class StudentMaster : public ApstraktniStudent {
  int godina;

public:
  StudentMaster(std::string ime, std::string prezime, int indeks, int godina)
      : ApstraktniStudent(ime, prezime, indeks) {
    StudentMaster::godina = godina;
  };
  ApstraktniStudent *DajKopiju() const override {
    return new StudentMaster(*this);
  }
  void IspisiPodatke() const override {
    std::cout << "Student master studija " << DajIme() << " " << DajPrezime()
              << ", sa brojem indeksa " << DajBrojIndeksa() << ",\n"
              << "zavrsio bachelor studij godine " << godina << ",ima prosjek "
              << DajProsjek() << "." << std::endl;
  }
};

class Fakultet {
  std::vector<ApstraktniStudent *> v;

public:
  Fakultet(){};
  ~Fakultet() {
    for (int i = 0; i < v.size(); i++)
      delete v[i];
  }
  Fakultet(const Fakultet &faks) {
    for (int i = 0; i < faks.v.size(); i++)
      v.push_back(faks.v[i]->DajKopiju());
  }
  Fakultet(Fakultet &&faks) {
    v = faks.v;
    faks.v.resize(0);
  }
  Fakultet &operator=(const Fakultet &faks) {
    for (int i = 0; i < v.size(); i++)
      delete v[i];
    v.resize(0);
    for (int i = 0; i < faks.v.size(); i++)
      v.push_back(faks.v[i]->DajKopiju());
    return *this;
  }
  Fakultet &operator=(Fakultet &&faks) {
    for (int i = 0; i < v.size(); i++)
      delete v[i];
    v.resize(0);
    std::swap(v, faks.v);
    return *this;
  }
  void UpisiStudenta(std::string ime, std::string prezime, int indeks) {
    for (int i = 0; i < v.size(); i++)
      if (v[i]->DajBrojIndeksa() == indeks)
        throw std::logic_error("Student sa zadanim brojem indeksa vec postoji");
    v.push_back(new StudentBachelor(ime, prezime, indeks));
  }
  void UpisiStudenta(std::string ime, std::string prezime, int indeks,
                     int godina) {
    for (int i = 0; i < v.size(); i++)
      if (v[i]->DajBrojIndeksa() == indeks)
        throw std::logic_error("Student sa zadanim brojem indeksa vec postoji");
    v.push_back(new StudentMaster(ime, prezime, indeks, godina));
  }
  void ObrisiStudenta(int indeks) {
    for (int i = 0; i < v.size(); i++)
      if (v[i]->DajBrojIndeksa() == indeks) {
        delete v[i];
        v.erase(std::find(v.begin(), v.end(), v[i]));
        return;
      }
    throw std::logic_error("Student sa zadanim brojem indeksa ne postoji");
  }
  const ApstraktniStudent &operator[](int indeks) const {
    for (int i = 0; i < v.size(); i++)
      if (v[i]->DajBrojIndeksa() == indeks)
        return *v[i];
    throw std::logic_error("Student sa zadanim brojem indeksa ne postoji");
  }
  ApstraktniStudent &operator[](int indeks) {
    for (int i = 0; i < v.size(); i++)
      if (v[i]->DajBrojIndeksa() == indeks)
        return *v[i];
    throw std::logic_error("Student sa zadanim brojem indeksa ne postoji");
  }
  void IspisiSveStudente() const {
    auto temp = v;
    std::sort(temp.begin(), temp.end(), [](auto a, auto b) {
      if (a->DajProsjek() != b->DajProsjek())
        return a->DajProsjek() > b->DajProsjek();
      else
        return a->DajBrojIndeksa() < b->DajBrojIndeksa();
    });
    for (int i = 0; i < temp.size(); i++)
      temp[i]->IspisiPodatke();
  }
};

int main() { return 0; }

// TP 2021/2022: ZadaÄ‡a 4, Zadatak 1
#include <algorithm>
#include <cmath>
#include <iostream>
#include <memory>
#include <tuple>
#include <vector>

const double pi = 4 * std::atan(1);
const double e = pow(10, -10);

class Kugla {
  double x, y, z, r;

public:
  explicit Kugla(double r = 0) {
    if (r < 0)
      throw std::domain_error("Ilegalan poluprecnik");
    Kugla::x = 0;
    Kugla::y = 0;
    Kugla::z = 0;
    Kugla::r = r;
  }
  Kugla(double x, double y, double z, double r = 0) {
    if (r < 0)
      throw std::domain_error("Ilegalan poluprecnik");
    Kugla::x = x;
    Kugla::y = y;
    Kugla::z = z;
    Kugla::r = r;
  }
  explicit Kugla(const std::tuple<double, double, double> &centar,
                 double r = 0) {
    if (r < 0)
      throw std::domain_error("Ilegalan poluprecnik");
    Kugla::x = std::get<0>(centar);
    Kugla::y = std::get<1>(centar);
    Kugla::z = std::get<2>(centar);
    Kugla::r = r;
  }
  double DajX() const { return x; }
  double DajY() const { return y; }
  double DajZ() const { return z; }
  std::tuple<double, double, double> DajCentar() const { return {x, y, z}; }
  double DajPoluprecnik() const { return r; }
  double DajPovrsinu() const { return 4 * pi * r * r; }
  double DajZapreminu() const { return 4 * pi * r * r * r / 3.; } 
  Kugla &PostaviX(double x) {
    Kugla::x = x;
    //postavili x...
    return *this;
  }
  Kugla &PostaviY(double y) {
    Kugla::y = y;
    //postavili y
    return *this;
  }
  Kugla &PostaviZ(double z) {
      //postavljanje z
      /*z = z;*/
    Kugla::z = z;
    return *this;
  }
  Kugla &PostaviCentar(double x, double y, double z) {
    Kugla::x = x;
    Kugla::y = y;
    Kugla::z = z;
    return *this;
  }
  Kugla &PostaviCentar(const std::tuple<double, double, double> &centar) {
    PostaviCentar(std::get<0>(centar), std::get<1>(centar),
                  std::get<2>(centar));
    return *this;
  }
  Kugla &PostaviPoluprecnik(double r) {
    if (r < 0)
      throw std::domain_error("Ilegalan poluprecnik");
    Kugla::r = r;
    return *this;
  }
  void Ispisi() const {
    std::cout << "{(" << DajX() << "," << DajY() << "," << DajZ() << "),"
              << DajPoluprecnik() << "}" << std::endl;
  }
  void Transliraj(double delta_x, double delta_y, double delta_z) {
    PostaviCentar(x + delta_x, y + delta_y, z + delta_z);
  }
  friend bool DaLiSuIdenticne(const Kugla &k1, const Kugla &k2);    // uradio
  friend bool DaLiSuPodudarne(const Kugla &k1, const Kugla &k2);    // uradio
  friend bool DaLiSuKoncentricne(const Kugla &k1, const Kugla &k2); // uradio
  friend bool DaLiSeDodirujuIzvana(const Kugla &k1, const Kugla &k2);
  friend bool DaLiSeDodirujuIznutra(const Kugla &k1, const Kugla &k2);
  friend bool DaLiSePreklapaju(const Kugla &k1, const Kugla &k2); // uradio
  friend bool DaLiSeSijeku(const Kugla &k1, const Kugla &k2);     // uradio
  bool DaLiSadrzi(const Kugla &k) const {
    return RastojanjeCentara(k, *this) - (r - k.r) <=
           e * (std::abs(RastojanjeCentara(k, *this)) + std::abs(r - k.r));
  }
  friend double RastojanjeCentara(const Kugla &k1, const Kugla &k2); // uradio
};

bool DaLiSuPodudarne(const Kugla &k1, const Kugla &k2) {
  if (std::abs(k1.DajPoluprecnik() - k2.DajPoluprecnik()) <=
      e * (std::abs(k1.DajPoluprecnik()) + std::abs(k2.DajPoluprecnik())))
    return true;
  return false;
}

bool DaLiSuKoncentricne(const Kugla &k1, const Kugla &k2) {
  if (std::abs(k1.DajX() - k2.DajX()) <=
          e * (std::abs(k1.DajX()) + std::abs(k2.DajX())) &&
      std::abs(k1.DajY() - k2.DajY()) <=
          e * (std::abs(k1.DajY()) + std::abs(k2.DajY())) &&
      std::abs(k1.DajZ() - k2.DajZ()) <=
          e * (std::abs(k1.DajZ()) + std::abs(k2.DajZ())))
    return true;
  return false;
}

bool DaLiSuIdenticne(const Kugla &k1, const Kugla &k2) {
  if (std::abs(k1.DajX() - k2.DajX()) <=
          e * (std::abs(k1.DajX()) + std::abs(k2.DajX())) &&
      std::abs(k1.DajY() - k2.DajY()) <=
          e * (std::abs(k1.DajY()) + std::abs(k2.DajY())) &&
      std::abs(k1.DajZ() - k2.DajZ()) <=
          e * (std::abs(k1.DajZ()) + std::abs(k2.DajZ())) &&
      std::abs(k1.DajPoluprecnik() - k2.DajPoluprecnik()) <=
          e * (std::abs(k1.DajPoluprecnik()) + std::abs(k2.DajPoluprecnik())))
    return true;
  return false;
}

double RastojanjeCentara(const Kugla &k1, const Kugla &k2) {
  return sqrt(pow((k2.DajX() - k1.DajX()), 2) +
              pow((k2.DajY() - k1.DajY()), 2) +
              pow((k2.DajZ() - k1.DajZ()), 2));
}

bool DaLiSeSijeku(const Kugla &k1, const Kugla &k2) {
  if (RastojanjeCentara(k1, k2) - (k1.r + k2.r) <= e &&
      DaLiSeDodirujuIznutra(k1, k2) == false &&
      DaLiSeDodirujuIzvana(k1, k2) == false &&
      (k1.DaLiSadrzi(k2) == false || k2.DaLiSadrzi(k1) == false))
    return true;
  return false;
}

bool DaLiSePreklapaju(const Kugla &k1, const Kugla &k2) {
  if (DaLiSeSijeku(k1, k2))
    return true;
  if (k1.DaLiSadrzi(k2))
    return true;
  if (k2.DaLiSadrzi(k1))
    return true;
  if (DaLiSuIdenticne(k1, k2))
    return true;
  if (DaLiSuKoncentricne(k1, k2))
    return true;
  if (DaLiSeDodirujuIznutra(k1, k2))
    return true;
  return false;
}

bool DaLiSeDodirujuIznutra(const Kugla &k1, const Kugla &k2) {
  return std::abs(RastojanjeCentara(k1, k2) - std::fabs(k1.r - k2.r)) <=
         e * (std::abs(RastojanjeCentara(k1, k2)) + std::abs(k1.r - k2.r));
}

bool DaLiSeDodirujuIzvana(const Kugla &k1, const Kugla &k2) {
  return std::abs(RastojanjeCentara(k1, k2) - (k1.r + k2.r)) <=
         e * (std::abs(RastojanjeCentara(k1, k2)) + std::abs(k1.r + k2.r));
}

int main() {
  std::cout << "Unesite broj kugla: ";
  int n;
  std::cin >> n;
  std::vector<std::shared_ptr<Kugla>> v(n);
  for (int i = 0; i < n; i++) {
    std::cout << "Unesite centar " << i + 1 << ". kugle: ";
    double x, y, z;
    std::cin >> x >> y >> z;
    std::cout << "Unesite poluprecnik " << i + 1 << ". kugle: ";
    double r;
    std::cin >> r;
    try {
      v.at(i) = std::make_shared<Kugla>();
      v.at(i)->PostaviPoluprecnik(r).PostaviCentar(x, y, z);
    } catch (std::domain_error e) {
      std::cout << e.what() << std::endl;
      i--;
    }
  }
  std::cout << "Unesite parametre translacije (delta_x,delta_y,delta_z): ";
  double dx, dy, dz;
  std::cin >> dx >> dy >> dz;
  std::transform(v.begin(), v.end(), v.begin(),
                 [dx, dy, dz](std::shared_ptr<Kugla> k) {
                   k->Transliraj(dx, dy, dz);
                   return k;
                 });
  std::sort(v.begin(), v.end(),
            [](std::shared_ptr<Kugla> k1, std::shared_ptr<Kugla> k2) {
              return k1->DajZapreminu() < k2->DajZapreminu();
            });
  std::cout
      << "Kugle nakon obavljenje transformacije imaju sljedece vrijednosti: "
      << std::endl;
  std::for_each(v.begin(), v.end(),
                [](std::shared_ptr<Kugla> k1) { k1->Ispisi(); });
  std::cout << "Kugla sa najvecom povrsinom je: ";
  (*std::max_element(v.begin(), v.end(),
                     [](std::shared_ptr<Kugla> k1, std::shared_ptr<Kugla> k2) {
                       return k1->DajPovrsinu() < k2->DajPovrsinu();
                     }))
      ->Ispisi();
  int br(0);
  bool DaLiSePresjecaju = false;
  std::for_each(v.begin(), v.end(), [&](std::shared_ptr<Kugla> k1) {
    br++;
    std::for_each(v.begin() + br, v.end(), [&](std::shared_ptr<Kugla> k2) {
      if (DaLiSeSijeku(*k1, *k2) == true) {
        std::cout << "Presjecaju se kugle: ";
        k1->Ispisi();
        k2->Ispisi();
        DaLiSePresjecaju = true;
      }
    });
  });
  if (DaLiSePresjecaju == false)
    std::cout << "Ne postoje kugle koje se presjecaju!";
  return 0;
}

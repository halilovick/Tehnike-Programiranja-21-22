// TP 2021/2022: ZadaÄ‡a 4, Zadatak 4
#include <algorithm>
#include <cmath>
#include <initializer_list>
#include <iomanip>
#include <iostream>
#include <memory>
#include <utility>
#include <vector>

std::string KojiVoz(bool voz) {
  if (voz == true)
    return "Brzi voz";
  return "Lokalni voz";
}

class Polazak {
  std::string odrediste;
  int broj_voza, broj_perona, sat_polaska, minute_polaska, trajanje_voznje,
      kasnjenje;
  bool brzi_voz;

public:
  Polazak(){};
  Polazak(std::string odrediste, int broj_voza, int broj_perona, bool brzi_voz,
          int sat_polaska, int minute_polaska, int trajanje_voznje) {
    if (broj_perona < 1 || broj_perona > 6)
      throw std::domain_error("Neispravan broj perona");
    if (sat_polaska < 0 || sat_polaska > 23)
      throw std::domain_error("Neispravan broj sati");
    int broj_cifri = 0, k = broj_voza;
    while (k != 0) {
      broj_cifri++;
      k /= 10;
    }
    if (broj_cifri > 5)
      throw std::domain_error("Prevelik broj!");
    if (sat_polaska < 0 || minute_polaska < 0 || trajanje_voznje < 0)
      throw std::domain_error("Neispravno vrijeme");
    Polazak::odrediste = odrediste;
    Polazak::broj_voza = broj_voza;
    Polazak::broj_perona = broj_perona;
    Polazak::brzi_voz = brzi_voz;
    Polazak::sat_polaska = sat_polaska;
    Polazak::minute_polaska = minute_polaska;
    Polazak::trajanje_voznje = trajanje_voznje;
    Polazak::kasnjenje = 0;
  }
  void PostaviKasnjenje(int kasnjenje) { Polazak::kasnjenje = kasnjenje; }
  bool DaLiKasni() const {
    if (Polazak::kasnjenje > 0)
      return true;
    return false;
  }
  int DajTrajanjeVoznje() const { return trajanje_voznje; }
  std::pair<int, int> DajOcekivanoVrijemePolaska() const {
    int sati = sat_polaska;
    int minute = minute_polaska + kasnjenje;
    while (minute > 59) {
      sati++;
      minute -= 60;
    }
    while (sati > 23)
      sati -= 24;
    return {sati, minute};
  }
  std::pair<int, int> DajOcekivanoVrijemeDolaska() const {
    int sati = sat_polaska;
    int minute = minute_polaska + trajanje_voznje + kasnjenje;
    while (minute > 59) {
      sati++;
      minute -= 60;
    }
    while (sati > 23)
      sati -= 24;
    return {sati, minute};
  }
  void Ispisi() const {
    if (kasnjenje > 0) {
      std::cout << KojiVoz(brzi_voz) << " broj " << broj_voza << ", odrediste "
                << odrediste << ", sa predvidjenim vremenom polaska u "
                << std::setfill('0') << std::setw(2) << sat_polaska << ":"
                << std::setfill('0') << std::setw(2) << minute_polaska
                << ", kasni oko " << kasnjenje << " minuta, te ce poci oko "
                << std::setfill('0') << std::setw(2)
                << DajOcekivanoVrijemePolaska().first << ":"
                << std::setfill('0') << std::setw(2)
                << DajOcekivanoVrijemePolaska().second
                << ". Ocekuje se da voz stigne na odrediste oko "
                << std::setfill('0') << std::setw(2)
                << DajOcekivanoVrijemeDolaska().first << ":"
                << std::setfill('0') << std::setw(2)
                << DajOcekivanoVrijemeDolaska().second
                << ". Izvinjavamo se putnicima zbog eventualnih neugodnosti.";
    } else {
      std::cout << KojiVoz(brzi_voz) << " broj " << broj_voza << ", odrediste "
                << odrediste << ", polazi sa perona " << broj_perona << " u "
                << std::setfill('0') << std::setw(2)
                << DajOcekivanoVrijemePolaska().first << ":"
                << std::setfill('0') << std::setw(2)
                << DajOcekivanoVrijemePolaska().second
                << ", a na odrediste stize u " << std::setfill('0')
                << std::setw(2) << DajOcekivanoVrijemeDolaska().first << ":"
                << std::setfill('0') << std::setw(2)
                << DajOcekivanoVrijemeDolaska().second
                << ". Putnicima i voznom osoblju zelimo ugodno putovanje.";
    }
  }
  friend class RedVoznje;
};

class RedVoznje {
  std::vector<std::shared_ptr<Polazak>> v;

public:
  explicit RedVoznje() {}
  RedVoznje(const RedVoznje &red_voznje) { v = red_voznje.v; }
  RedVoznje(RedVoznje &&red_voznje) {
    v = red_voznje.v;
    // v.resize(red_voznje.v.size());
    red_voznje.v.resize(0);
  }
  RedVoznje(std::initializer_list<Polazak> lista_polazaka) {
    auto it = lista_polazaka.begin();
    for (int i = 0; i < lista_polazaka.size(); i++)
      v.push_back(std::make_shared<Polazak>(*it++));
  }
  RedVoznje &operator=(const RedVoznje &red_voznje) {
    if (&red_voznje != this)
      v = red_voznje.v;
    return *this;
  }
  void RegistrirajPolazak(std::string odrediste, int broj_voza, bool brzi_voz,
                          int broj_perona, int sat_polaska, int minute_polaska,
                          int trajanje_voznje) {
    v.push_back(std::make_shared<Polazak>(odrediste, broj_voza, broj_perona,
                                          brzi_voz, sat_polaska, minute_polaska,
                                          trajanje_voznje));
  }
  void RegistrirajPolazak(std::shared_ptr<Polazak> p) { v.push_back(p); }
  int DajBrojPolazaka() const { return v.size(); }
  int DajBrojPolazakaKojiKasne() const {
    if (v.size() == 0)
      return 0;
    int br = std::count_if(v.begin(), v.end(), [](auto p1) {
      if (p1->DaLiKasni() == true)
        return true;
      return false;
    });
    return br;
  }
  int DajProsjecnoTrajanjeVoznji() const {
    if (v.size() == 0)
      return 0;
    int ukupno = 0;
    for (int k = 0; k < v.size(); k++) {
      ukupno += v[k]->DajTrajanjeVoznje();
    }
    return ukupno / v.size();
  }
  Polazak &DajPrviPolazak() const {
    if (v.size() == 0)
      throw std::domain_error("Nema registriranih polazaka");
    auto it1 = std::min_element(v.begin(), v.end(), [](auto p1, auto p2) {
      int h1 = p1->sat_polaska, m1 = p1->minute_polaska, h2 = p2->sat_polaska,
          m2 = p2->minute_polaska;
      double u1 = h1 * 60 + m1, u2 = h2 * 60 + m2;
      return u1 > u2;
    });
    return **it1;
  }
  Polazak &DajPosljednjiPolazak() const {
    if (v.size() == 0)
      throw std::domain_error("Nema registriranih polazaka");
    auto it1 = std::max_element(v.begin(), v.end(), [](auto p1, auto p2) {
      double u1 = p1->sat_polaska * 60 + p1->minute_polaska,
             u2 = p2->sat_polaska * 60 + p2->minute_polaska;
      return u1 > u2;
    });
    return **it1;
  }
  void IsprazniRedVoznje() { v.resize(0); }
  void Ispisi(int sati, int minute) const {
    auto b = v;
    std::sort(b.begin(), b.end(), [](auto p1, auto p2) {
      double u1 = p1->DajOcekivanoVrijemePolaska().first * 60 +
                  p1->DajOcekivanoVrijemePolaska().second,
             u2 = p2->DajOcekivanoVrijemePolaska().first * 60 +
                  p2->DajOcekivanoVrijemePolaska().second;
      return u1 < u2;
    });
    for (int k = 0; k < v.size(); k++) {
      if (b[k]->DajOcekivanoVrijemePolaska().first > sati) {
        b[k]->Ispisi();
        std::cout << std::endl;
      } else if (b[k]->DajOcekivanoVrijemePolaska().first == sati &&
                 b[k]->DajOcekivanoVrijemePolaska().second >= minute) {
        b[k]->Ispisi();
        std::cout << std::endl;
      }
    }
  }
};

int main() {
  RedVoznje voznje;
  std::cout << "Unesite broj polazaka: ";
  int n;
  std::cin >> n;
  for (int i = 0; i < n; i++) {
    std::string odrediste;
    std::cout << "Unesite odrediste: ";
    std::cin >> odrediste;
    int broj_voza;
    std::cout << "Unesite broj voza: ";
    std::cin >> broj_voza;
    int broj_perona;
    std::cout << "Unesite broj perona: ";
    std::cin >> broj_perona;
    std::cout << "Da li je brzi voz? (1 za da, 0 za ne): ";
    bool brzi_voz;
    std::cin >> brzi_voz;
    std::cout << "Unesite sat polaska: ";
    int sat;
    std::cin >> sat;
    std::cout << "Unesite minute polaska: ";
    int minute;
    std::cin >> minute;
    int trajanje;
    std::cout << "Unesite trajanje voznje: ";
    std::cin >> trajanje;
    try {
      voznje.RegistrirajPolazak(odrediste, broj_voza, brzi_voz, broj_perona,
                                sat, minute, trajanje);
    } catch (std::range_error e) {
      std::cout << e.what();
    }
  }
  voznje = voznje;
  RedVoznje voznje2(voznje);
  RedVoznje voznje3;
  voznje3 = voznje2;
  std::cout << "Podaci o redu voznji:\n"
            << "Broj polazaka: " << voznje.DajBrojPolazaka()
            << "\nProsjecno trajanje voznji: "
            << voznje.DajProsjecnoTrajanjeVoznji();
  return 0;
}

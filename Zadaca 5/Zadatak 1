// TP 2021/2022: ZadaÄ‡a 5, Zadatak 1
#include <iostream>
#include <limits>
#include <sstream>
#include <stdexcept>

const long long int m = std::numeric_limits<long long int>::lowest();
const long long int M = std::numeric_limits<long long int>::max();

bool ProvjeriMult(long long int x, long long int y) {
  if (y > 0 && (x < m / y || x > M / y))
    return false;
  if (y < 0 && (x == m || -x > M / (-y)))
    return false;
  return true;
}

bool ProvjeriAdd(long long int x, long long int y) {
  if (y > 0 && x > M - y)
    return false;
  if (y < 0 && x < m - y)
    return false;
  return true;
}

class Razlomak {
  long long int a, b;
  static long long int NZD(long long int p, long long int q) {
    if (p == 0)
      return q;
    return NZD(q % p, p);
  }

public:
  Razlomak(long long int brojnik = 0, long long int nazivnik = 1) {
    if (nazivnik == 0)
      throw std::logic_error("Nekorektan razlomak");
    long long int nzd = NZD(brojnik, nazivnik);
    a = brojnik / nzd;
    b = nazivnik / nzd;
    if (b < 0) {
      a *= -1;
      b *= -1;
    }
  }
  operator long double() const;
  long long int DajBrojnik() const { return a; }
  long long int DajNazivnik() const { return b; }
  friend const Razlomak operator+(const Razlomak r1) { return r1; }
  friend const Razlomak operator-(const Razlomak r1);
  friend Razlomak operator+(const Razlomak r1, const Razlomak r2);
  friend Razlomak operator-(const Razlomak r1, const Razlomak r2);
  friend Razlomak operator*(const Razlomak r1, const Razlomak r2);
  friend Razlomak operator/(const Razlomak r1, const Razlomak r2);
  friend Razlomak &operator+=(Razlomak &r1, const Razlomak r2);
  friend Razlomak &operator-=(Razlomak &r1, const Razlomak r2);
  friend Razlomak &operator*=(Razlomak &r1, const Razlomak r2);
  friend Razlomak &operator++(Razlomak &r) { return r += 1; }
  friend Razlomak operator++(Razlomak &r, int);
  friend Razlomak &operator--(Razlomak &r) { return r -= 1; }
  friend Razlomak operator--(Razlomak &r, int);
  friend std::ostream &operator<<(std::ostream &stream, const Razlomak &r);
  friend std::istream &operator>>(std::istream &stream, Razlomak &r);
  friend bool operator>(const Razlomak &r1, const Razlomak &r2);
  friend bool operator>=(const Razlomak &r1, const Razlomak &r2);
  friend bool operator<(const Razlomak &r1, const Razlomak &r2);
  friend bool operator<=(const Razlomak &r1, const Razlomak &r2);
  friend bool operator==(const Razlomak &r1, const Razlomak &r2);
  friend bool operator!=(const Razlomak &r1, const Razlomak &r2);
};

const Razlomak operator-(const Razlomak r1) { return {r1.a * -1, r1.b}; }

Razlomak::operator long double() const {
  return (long double)a / (long double)b;
}

Razlomak operator++(Razlomak &r, int) {
  Razlomak pomocni = r;
  r += 1;
  return pomocni;
}

Razlomak operator--(Razlomak &r, int) {
  Razlomak pomocni = r;
  r -= 1;
  return pomocni;
}

Razlomak operator+(const Razlomak r1, const Razlomak r2) {
  long long int p1 = r1.a, q1 = r1.b, p2 = r2.a, q2 = r2.b,
                r = Razlomak::NZD(q1, q2), tq2 = q2 / r, tq1 = q1 / r;
  if (!ProvjeriMult(p1, tq2) || !ProvjeriMult(p2, tq1) ||
      !ProvjeriMult(q1, tq2))
    throw std::overflow_error("Nemoguce dobiti tacan rezultat");
  long long int t1 = p1 * tq2, t2 = p2 * tq1, t3 = q1 * tq2;
  if (!ProvjeriAdd(t1, t2))
    throw std::overflow_error("Nemoguce dobiti tacan rezultat");
  return Razlomak(t1 + t2, t3);
}

Razlomak operator-(const Razlomak r1, const Razlomak r2) {
  long long int p1 = r1.a, q1 = r1.b, p2 = r2.a, q2 = r2.b,
                r = Razlomak::NZD(q1, q2), tq2 = q2 / r, tq1 = q1 / r;
  if (!ProvjeriMult(p1, tq2) || !ProvjeriMult(p2, tq1) ||
      !ProvjeriMult(q1, tq2))
    throw std::overflow_error("Nemoguce dobiti tacan rezultat");
  long long int t1 = p1 * tq2, t2 = p2 * tq1, t3 = q1 * tq2;
  if (!ProvjeriAdd(t1, -t2))
    throw std::overflow_error("Nemoguce dobiti tacan rezultat");
  return Razlomak(t1 - t2, t3);
}

Razlomak operator*(const Razlomak r1, const Razlomak r2) {
  long long int p1 = r1.a, q1 = r1.b, p2 = r2.a, q2 = r2.b,
                s = Razlomak::NZD(p1, q2), t = Razlomak::NZD(p2, q1),
                t1 = p1 / s, t2 = p2 / t, t3 = q1 / t, t4 = q2 / s;
  if (!ProvjeriMult(t1, t2) || !ProvjeriMult(t3, t4))
    throw std::overflow_error("Nemoguce dobiti tacan rezultat");
  return Razlomak(t1 * t2, t3 * t4);
}

Razlomak operator/(const Razlomak r1, const Razlomak r2) {
  long long int p1 = r1.a, q1 = r1.b, p2 = r2.a, q2 = r2.b,
                u = Razlomak::NZD(p1, p2), r = Razlomak::NZD(q1, q2),
                t1 = p1 / u, t2 = q2 / r, t3 = q1 / r, t4 = p2 / u;
  if (!ProvjeriMult(t1, t2) || !ProvjeriMult(t3, t4))
    throw std::overflow_error("Nemoguce dobiti tacan rezultat");
  return Razlomak(t1 * t2, t3 * t4);
}

Razlomak &operator+=(Razlomak &r1, const Razlomak r2) {
  r1 = r1 + r2;
  return r1;
}
Razlomak &operator-=(Razlomak &r1, const Razlomak r2) {
  r1 = r1 - r2;
  return r1;
}
Razlomak &operator*=(Razlomak &r1, const Razlomak r2) {
  r1 = r1 * r2;
  return r1;
}
Razlomak &operator/=(Razlomak &r1, const Razlomak r2) {
  r1 = r1 / r2;
  return r1;
}

std::ostream &operator<<(std::ostream &stream, const Razlomak &r) {
  if (r.b == 1) {
    stream << r.a;
  } else {
    stream << r.a << "/" << r.b;
  }
  return stream;
}

std::istream &operator>>(std::istream &stream, Razlomak &r) {
  long long int a = 0, b = 1;
  stream >> a;
  if (stream.peek() == '\n' || stream.peek() == '\r' || stream.peek() == '\f' ||
      stream.peek() == '\v' || stream.peek() == '\t' || stream.peek() == ' ' ||
      stream.peek() == EOF) {
    b = 1;
  } else {
    stream >> std::ws;
    char znak(stream.get());
    if (znak != '/') {
      stream.setstate(std::ios::failbit);
      return stream;
    }
    stream >> std::ws >> b;
    if (stream.peek() != '\n' && stream.peek() != '\r' &&
        stream.peek() != '\f' && stream.peek() != '\v' &&
        stream.peek() != '\t' && stream.peek() != ' ' && stream.peek() != EOF) {
      stream.setstate(std::ios::failbit);
      return stream;
    }
  }
  r = Razlomak(a, b);
  return stream;
}

bool operator>(const Razlomak &r1, const Razlomak &r2) {
  long double x = r1.a / r1.b, y = r2.a / r2.b;
  return x > y;
}

bool operator>=(const Razlomak &r1, const Razlomak &r2) {
  if (r1 == r2)
    return true;
  long double x = r1.a / r1.b, y = r2.a / r2.b;
  return x >= y;
}

bool operator<(const Razlomak &r1, const Razlomak &r2) {
  long double x = r1.a / r1.b, y = r2.a / r2.b;
  return x < y;
}

bool operator<=(const Razlomak &r1, const Razlomak &r2) {
  if (r1 == r2)
    return true;
  long double x = r1.a / r1.b, y = r2.a / r2.b;
  return x <= y;
}

bool operator==(const Razlomak &r1, const Razlomak &r2) {
  return r1.a == r2.a && r1.b == r2.b;
}

bool operator!=(const Razlomak &r1, const Razlomak &r2) { return !(r1 == r2); }

int main() {
  Razlomak r, q, t;
  /*std::istringstream is(" 1/3   5/7  4/2    nebitno");
  is.clear();
  is >> r >> q >> t;
  std::cout << "r = " << r << ", q = " << q << ", t = " << t;*/
  std::istringstream is("10/ 20");
  is >> r;
  std::cout << r << std::endl;
}

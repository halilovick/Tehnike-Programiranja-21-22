// TP 2021/2022: ZadaÄ‡a 5, Zadatak 5
#include <algorithm>
#include <cmath>
#include <fstream>
#include <iomanip>
#include <iostream>

template <typename TipEl> class Matrica {
  char ime_matrice;
  int br_redova, br_kolona;
  TipEl **elementi{};
  static TipEl **AlocirajMemoriju(int br_redova, int br_kolona);
  static void DealocirajMemoriju(TipEl **elementi, int br_redova);
  void KopirajElemente(TipEl **elementi);

public:
  Matrica(int br_redova, int br_kolona, char ime = 0);
  Matrica(const Matrica &m);
  Matrica(Matrica &&m);
  Matrica<TipEl>(const std::string &imedat, bool x) {
    if (x == false) {
      std::ifstream ulaz(imedat);
      if (!ulaz)
        throw std::logic_error("Trazena datoteka ne postoji");
      double a;
      bool provjera = false;
      int tempbrojkolona(1), tempbrojredova(1);
      while (ulaz) {
        ulaz >> a;
        char ch(ulaz.get());
        if (ch == ',' && provjera == false && ch != '\n' && ch != ' ')
          tempbrojkolona++;
        if (ch == '\n') {
          provjera = true;
          tempbrojredova++;
        }
      }
      br_kolona = tempbrojkolona;
      br_redova = tempbrojredova;
      elementi = AlocirajMemoriju(tempbrojredova, tempbrojkolona);
      ObnoviIzTekstualneDatoteke(imedat);
    } else if (x == true) {
      std::ifstream ulaz(imedat, std::ios::binary | std::ios::in);
      if (!ulaz)
        throw std::logic_error("Trazena datoteka ne postoji");
      ulaz.read(reinterpret_cast<char *>(this), sizeof *this);
      elementi = new TipEl *[br_redova] {};
      for (int i = 0; i < br_redova; i++) {
        elementi[i] = nullptr;
      }
      for (int i = 0; i < br_redova; i++) {
        elementi[i] = new TipEl[br_kolona];
        ulaz.read(reinterpret_cast<char *>(elementi[i]),
                  br_kolona * sizeof(TipEl));
      }
      if (!ulaz) {
        for (int i = 0; i < br_redova; i++) {
          delete[] elementi[i];
        }
        delete[] elementi;
        throw std::logic_error("Problemi pri citanju datoteke");
      }
    }
  }
  ~Matrica() { DealocirajMemoriju(elementi, br_redova); }
  Matrica &operator=(const Matrica &m);
  Matrica &operator=(Matrica &&m);
  template <typename Tip>
  friend std::istream &operator>>(std::istream &tok, const Matrica<Tip> &m);
  template <typename Tip>
  friend std::ostream &operator<<(std::ostream &tok, const Matrica<Tip> &m);
  template <typename Tip>
  friend Matrica<Tip> operator+(const Matrica<Tip> &m1, const Matrica<Tip> &m2);
  template <typename Tip>
  friend Matrica<Tip> operator-(const Matrica<Tip> &m1, const Matrica<Tip> &m2);
  template <typename Tip>
  friend Matrica<Tip> operator*(const Matrica<Tip> &m1, const Matrica<Tip> &m2);
  template <typename Tip>
  friend Matrica<Tip> operator*(const Matrica<Tip> &m1, double skalar);
  template <typename Tip>
  friend Matrica<Tip> operator*(double skalar, const Matrica<Tip> &m1);
  template <typename Tip>
  friend Matrica<Tip> &operator+=(const Matrica<Tip> &m1,
                                  const Matrica<Tip> &m2);
  template <typename Tip>
  friend Matrica<Tip> &operator-=(const Matrica<Tip> &m1,
                                  const Matrica<Tip> &m2);
  Matrica<TipEl> &operator*=(double skalar);
  TipEl *operator[](int i) const;
  TipEl *operator[](int i);
  TipEl &operator()(int i, int j);
  TipEl operator()(int i, int j) const;
  operator std::string() const;
  void SacuvajUTekstualnuDatoteku(const std::string &imedat) {
    std::ofstream ulaz(imedat);
    for (int i = 0; i < br_redova; i++) {
      for (int j = 0; j < br_kolona; j++) {
        if (j == br_kolona - 1) {
          ulaz << this->elementi[i][j];
        } else {
          if (!ulaz)
            throw std::logic_error("Problemi sa upisom u datoteku");
          ulaz << this->elementi[i][j] << ",";
        }
      }
      ulaz << std::endl;
    }
  }
  void SacuvajUBinarnuDatoteku(const std::string &imedat) {
    std::ofstream ulaz(imedat, std::ios::binary);
    ulaz.write((char *)this, sizeof(*this));
    for (int i = 0; i < br_redova; i++) {
      ulaz.write((char *)elementi[i], br_kolona * sizeof(TipEl));
    }
    if (!ulaz)
      throw std::logic_error("Problemi sa upisom u datoteku");
  }
  void ObnoviIzTekstualneDatoteke(const std::string &imedat) {
    std::ifstream ulaz(imedat);
    while (ulaz) {
      TipEl t;
      ulaz >> t;
      if (ulaz.bad()) {
        // DealocirajMemoriju(elementi, br_redova);
        throw std::logic_error("Datoteka sadrzi besmislene podatke");
      }
      char ch(ulaz.get());
      if (ch != '\n' && ch != ' ' && ch != ',' && ch != EOF) {
        // DealocirajMemoriju(elementi, br_redova);
        throw std::logic_error("Datoteka sadrzi besmislene podatke");
      }
    }
    ulaz.close();
    std::ifstream noviulaz(imedat);
    if (!noviulaz) {
      throw std::logic_error("Trazena datoteka ne postoji");
    }
    for (int i = 0; i < br_redova; i++)
      for (int j = 0; j < br_kolona; j++)
        this->elementi[i][j] = 0;
    for (int i = 0; i < br_redova; i++)
      for (int j = 0; j < br_kolona; j++) {
        if (j == br_kolona - 1) {
          noviulaz >> this->elementi[i][j];
        } else {
          char znak;
          noviulaz >> this->elementi[i][j] >> znak;
        }
      }
  }
  void ObnoviIzBinarneDatoteke(const std::string &imedat) {
    std::ifstream ulaz(imedat, std::ios::binary | std::ios::in);
    if (!ulaz) {
      throw std::logic_error("Trazena datoteka ne postoji");
    }
    for (int i = 0; i < br_redova; i++)
      for (int j = 0; j < br_kolona; j++)
        this->elementi[i][j] = 0;
    double br;
    for (int i = 0; i < br_redova; i++)
      for (int j = 0; j < br_kolona; j++) {
        if (j == br_kolona - 1) {
          ulaz.read(reinterpret_cast<char *>(&br), sizeof br);
          elementi[i][j] = br;
        } else {
          ulaz.read(reinterpret_cast<char *>(&br), sizeof br);
          elementi[i][j] = br;
          ulaz.read(reinterpret_cast<char *>(&br), sizeof br);
        }
      }
  }
};

template <typename Tip> Matrica<Tip>::operator std::string() const {
  std::string s;
  s.push_back('{');
  for (int i = 0; i < br_redova; i++) {
    s.push_back('{');
    for (int j = 0; j < br_kolona; j++) {
      s += std::to_string((int)elementi[i][j]);
      if (j != br_kolona - 1)
        s.push_back(',');
    }
    s.push_back('}');
    if (i != br_redova - 1)
      s.push_back(',');
  }
  s.push_back('}');
  return s;
}

template <typename Tip>
Tip **Matrica<Tip>::AlocirajMemoriju(int br_redova, int br_kolona) {
  Tip **elementi = new Tip *[br_redova] {};
  try {
    for (int i = 0; i < br_redova; i++)
      elementi[i] = new Tip[br_kolona];
  } catch (...) {
    DealocirajMemoriju(elementi, br_redova);
    throw;
  }
  return elementi;
}

template <typename Tip>
void Matrica<Tip>::DealocirajMemoriju(Tip **elementi, int br_redova) {
  if (elementi == nullptr)
    return;
  for (int i = 0; i < br_redova; i++)
    delete[] elementi[i];
  delete[] elementi;
}

template <typename Tip>
Matrica<Tip>::Matrica(int br_redova, int br_kolona, char ime)
    : br_redova(br_redova), br_kolona(br_kolona), ime_matrice(ime),
      elementi(AlocirajMemoriju(br_redova, br_kolona)) {}

template <typename Tip> void Matrica<Tip>::KopirajElemente(Tip **elementi) {
  for (int i = 0; i < br_redova; i++) {
    for (int j = 0; j < br_kolona; j++) {
      Matrica::elementi[i][j] = elementi[i][j];
    }
  }
}

template <typename Tip>
Matrica<Tip>::Matrica(const Matrica<Tip> &m)
    : br_redova(m.br_redova), br_kolona(m.br_kolona),
      ime_matrice(m.ime_matrice),
      elementi(AlocirajMemoriju(m.br_redova, m.br_kolona)) {
  KopirajElemente(m.elementi);
}

template <typename Tip>
Matrica<Tip>::Matrica(Matrica<Tip> &&m)
    : br_redova(m.br_redova), br_kolona(m.br_kolona),
      ime_matrice(m.ime_matrice), elementi(m.elementi) {
  m.br_redova = 0;
  m.elementi = nullptr;
}

template <typename Tip>
Matrica<Tip> &Matrica<Tip>::operator=(const Matrica<Tip> &m) {
  if (br_redova < m.br_redova || br_kolona < m.br_kolona) {
    Tip **novi_prostor = AlocirajMemoriju(m.br_redova, m.br_kolona);
    DealocirajMemoriju(elementi, br_redova);
    elementi = novi_prostor;
  } else if (br_redova > m.br_redova)
    for (int i = m.br_redova; i < br_redova; i++)
      delete elementi[i];
  br_redova = m.br_redova;
  br_kolona = m.br_kolona;
  ime_matrice = m.ime_matrice;
  KopirajElemente(m.elementi);
  return *this;
}

template <typename Tip>
Matrica<Tip> &Matrica<Tip>::operator=(Matrica<Tip> &&m) {
  std::swap(br_redova, m.br_redova);
  std::swap(br_kolona, m.br_kolona);
  std::swap(ime_matrice, m.ime_matrice);
  std::swap(elementi, m.elementi);
  return *this;
}

template <typename Tip>
std::istream &operator>>(std::istream &tok, const Matrica<Tip> &m) {
  for (int i = 0; i < m.br_redova; i++) {
    for (int j = 0; j < m.br_kolona; j++) {
      std::cout << m.ime_matrice << "(" << i + 1 << "," << j + 1 << ") = ";
      tok >> m.elementi[i][j];
    }
  }
  return tok;
}

template <typename Tip>
std::ostream &operator<<(std::ostream &tok, const Matrica<Tip> &m) {
  int sirina = tok.width();
  for (int i = 0; i < m.br_redova; i++) {
    for (int j = 0; j < m.br_kolona; j++) {
      tok << std::setw(sirina) << m.elementi[i][j];
      tok << std::endl;
    }
  }
  return tok;
}

template <typename Tip>
Matrica<Tip> operator*(const Matrica<Tip> &m1, const Matrica<Tip> &m2) {
  if (m1.br_kolona != m2.br_redova || (m1.br_redova == 0 || m2.br_kolona == 0))
    throw std::domain_error("Matrice nisu saglasne za mnozenje");
  Matrica<Tip> m3(m1.br_redova, m2.br_kolona);
  for (int i = 0; i < m3.br_redova; i++)
    for (int j = 0; j < m3.br_kolona; j++) {
      m3.elementi[i][j] = 0;
      for (int k = 0; k < m1.br_kolona; ++k) {
        m3.elementi[i][j] += m1.elementi[i][k] * m2.elementi[k][j];
      }
    }
  return m3;
}

template <typename Tip> Tip Matrica<Tip>::operator()(int i, int j) const {
  if (i < 1 || i > br_redova || j < 1 || j > br_kolona)
    throw std::range_error("Neispravan indeks");
  return elementi[i - 1][j - 1];
}

template <typename Tip> Tip &Matrica<Tip>::operator()(int i, int j) {
  if (i < 1 || i > br_redova || j < 1 || j > br_kolona)
    throw std::range_error("Neispravan indeks");
  return elementi[i - 1][j - 1];
}

template <typename Tip> Tip *Matrica<Tip>::operator[](int i) const {
  if (i >= br_redova || i < 0)
    throw std::range_error("Neispravan indeks");
  return elementi[i];
}

template <typename Tip> Tip *Matrica<Tip>::operator[](int i) {
  if (i >= br_redova || i < 0)
    throw std::range_error("Neispravan indeks");
  return elementi[i];
}

template <typename Tip>
Matrica<Tip> operator+(const Matrica<Tip> &m1, const Matrica<Tip> &m2) {
  if (m1.br_redova != m2.br_redova || m1.br_kolona != m2.br_kolona)
    throw std::domain_error("Matrice nemaju jednake dimenzije!");
  Matrica<Tip> m3(m1.br_redova, m1.br_kolona);
  for (int i = 0; i < m3.br_redova; i++)
    for (int j = 0; j < m3.br_kolona; j++)
      m3.elementi[i][j] = m1.elementi[i][j] + m2.elementi[i][j];
  return m3;
}

template <typename Tip>
Matrica<Tip> operator-(const Matrica<Tip> &m1, const Matrica<Tip> &m2) {
  if (m1.br_redova != m2.br_redova || m1.br_kolona != m2.br_kolona)
    throw std::domain_error("Matrice nemaju jednake dimenzije!");
  Matrica<Tip> m3(m1.br_redova, m1.br_kolona);
  for (int i = 0; i < m3.br_redova; i++)
    for (int j = 0; j < m3.br_kolona; j++)
      m3.elementi[i][j] = m1.elementi[i][j] - m2.elementi[i][j];
  return m3;
}

template <typename Tip>
Matrica<Tip> &operator+=(Matrica<Tip> &m1, const Matrica<Tip> &m2) {
  if (m1.br_redova != m2.br_redova || m1.br_kolona != m2.br_kolona)
    throw std::domain_error("Matrice nemaju jednake dimenzije!");
  m1 = m1 + m2;
  return m1;
}

template <typename Tip>
Matrica<Tip> &operator-=(Matrica<Tip> &m1, const Matrica<Tip> &m2) {
  if (m1.br_redova != m2.br_redova || m1.br_kolona != m2.br_kolona)
    throw std::domain_error("Matrice nemaju jednake dimenzije!");
  m1 = m1 - m2;
  return m1;
}

template <typename Tip>
Matrica<Tip> &operator*=(Matrica<Tip> &m1, const Matrica<Tip> &m2) {
  if (m1.br_redova != m2.br_redova || m1.br_kolona != m2.br_kolona)
    throw std::domain_error("Matrice nemaju jednake dimenzije!");
  m1 = m1 * m2;
  return m1;
}

template <typename Tip>
Matrica<Tip> operator*(const Matrica<Tip> &m1, double br) {
  auto a = m1;
  a *= br;
  return a;
}

template <typename Tip>
Matrica<Tip> operator*(double br, const Matrica<Tip> &m1) {
  auto a = m1;
  a *= br;
  return a;
}

template <typename Tip> Matrica<Tip> &Matrica<Tip>::operator*=(double br) {
  for (int i = 0; i < br_redova; i++)
    for (int j = 0; j < br_kolona; j++)
      elementi[i][j] *= br;
  return *this;
}

int main() { return 0; }
